# -*- coding: utf-8 -*-
"""Ai Pneumonia Detector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ns_RMwvsUHuGyhSvynRruIKZJq7VIsFF
"""

!pip install streamlit pyttsx3 pyngrok

!wget -q -O - ipv4.icanhazip.com

!pip install torchvision

!pip install tensorflow

!pip install --upgrade openai

!pip install gtts

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import torch
# import torchvision.transforms as transforms
# from PIL import Image
# import requests
# import openai
# import pyttsx3
# import os
# from pyngrok import ngrok
# from PIL import Image
# import torch
# from tensorflow.keras.models import load_model
# from torchvision import transforms
# import os
# import torch.nn as nn
# import torchvision.models as models  # Add this import
# from openai import OpenAI
# 
# # Set up Streamlit page config
# st.set_page_config(page_title="AI Pneumonia Detector", page_icon="ü©∫", layout="centered")
# 
# # Custom CSS for background image
# st.markdown(
#     """
#     <style>
#     .stApp {
#         background: url('https://t4.ftcdn.net/jpg/03/65/59/15/360_F_365591556_q2xHXRo7woO1JBMFNkxOD5mQv1PfIdMz.jpg') no-repeat center center fixed;
#         background-size: cover;
#     }
#     </style>
#     """,
#     unsafe_allow_html=True
# )
# # Custom CSS for styling
# st.markdown(
#     """
#     <style>
#     .stApp {
#         background-color: #121212;
#     }
#     .custom-label {
#         color: #4CAF50;
#         font-size: 20px;
#         font-weight: bold;
#         text-align: center;
#     }
#     .custom-button {
#         background-color: #008CBA;
#         color: white;
#         font-size: 18px;
#         font-weight: bold;
#         border: 2px solid blue;
#         border-radius: 5px;
#     }
#     .custom-button:active {
#         border-color: darkblue;
#     }
#     </style>
#     """,
#     unsafe_allow_html=True
# )
# 
# # Define the model architecture
# model = models.densenet121(pretrained=False)  # Using DenseNet-121 (CheXNet)
# num_ftrs = model.classifier.in_features
# model.classifier = torch.nn.Linear(num_ftrs, 2)
# 
# 
# # Load the model checkpoint
# checkpoint = torch.load("/content/penumonia_model.pth", map_location=torch.device('cpu'))
# 
# from collections import OrderedDict  # Add this import
# 
# # Remove 'module.' prefix if the model was trained with DataParallel
# new_state_dict = OrderedDict()
# for k, v in checkpoint.items():
#     new_key = k.replace("module.", "")  # Remove 'module.' prefix
#     new_state_dict[new_key] = v
# 
# # Load the corrected state dictionary
# model.load_state_dict(new_state_dict, strict=False)
# 
# # Set the model to evaluation mode
# model.eval()
# 
# 
# def preprocess_image(image):
#     # Convert grayscale to RGB if necessary
#     if image.mode != 'RGB':
#         image = image.convert('RGB')
# 
#     transform = transforms.Compose([
#         transforms.Resize((224, 224)),
#         transforms.ToTensor(),
#         transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])  # Normalization for 3 channels
#     ])
# 
#     image_tensor = transform(image)  # Shape: [3, 224, 224] (C, H, W)
#     image_tensor = image_tensor.unsqueeze(0)  # Shape: [1, 3, 224, 224] (B, C, H, W)
# 
#     return image_tensor
# 
# 
# def predict_pneumonia(image):
#     # Preprocess the image
#     image_tensor = preprocess_image(image)
# 
#     # Perform prediction
#     with torch.no_grad():
#         output = model(image_tensor)  # Model output shape: (1, 2)
# 
#     # Apply softmax to get probabilities for both classes
#     probabilities = torch.softmax(output, dim=1)  # Shape: (1, 2)
# 
#     # Get the probability for the "Pneumonia" class (index 1)
#     pneumonia_probability = probabilities[0, 1].item()  # Extract probability for pneumonia class
# 
#     return pneumonia_probability
# 
# 
# os.environ["OPENAI_API_KEY"] = "Your_Open_Api_Secret_Key"
# 
# # OpenAI Explanation Generation
# def generate_explanation(probability):
#     severity = "high probability" if probability > 0.5 else "low probability"
#     prompt = f"A chest X-ray analysis shows a {severity} of pneumonia. Explain this in simple terms for an elderly patient."
# 
#     try:
#         client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
#         response = client.chat.completions.create(
#             model="gpt-4o-mini",
#             messages=[
#                 {"role": "system", "content": "You are a helpful medical assistant."},
#                 {"role": "user", "content": prompt}
#             ]
#         )
#         return f"The probability is {severity}. " + response.choices[0].message.content.strip()  # ‚úÖ Corrected here
#     except Exception as e:
#         return f"Error generating explanation: {e}"
# 
# 
# # Set your OpenAI API key as an environment variable:
# # os.environ["OPENAI_API_KEY"] = "YOUR_API_KEY"
# 
# 
# import streamlit as st
# from PIL import Image
# 
# # Streamlit UI Design
# st.markdown("""
#     <h1 style='text-align: center; color: #00008B;'>ü©∫ AI Pneumonia Detector</h1>
#     <h3 style='text-align: center; color: #FFFFFF'>Analyze Pneumonia from Chest X-ray</h3>
# """, unsafe_allow_html=True)
# 
# uploaded_file = st.file_uploader("Upload X-ray Image", type=["jpg", "png", "jpeg"], help="Only JPEG, PNG allowed.")
# if uploaded_file:
#     image = Image.open(uploaded_file)
#     st.image(image, caption="üñºÔ∏è Uploaded X-ray", use_container_width =True)
# 
#     if st.button("üîç Analyze X-ray", use_container_width=True):
#         with st.spinner("Analyzing... Please wait ‚è≥"):
#          probability = predict_pneumonia(image)  # Now this returns both prediction and probability
#          explanation = generate_explanation(probability)  # Pass both to explanation function
# 
#         st.success("‚úÖ Analysis Complete!")
#         st.subheader("üî¨ AI Diagnosis Explanation:")
#         st.info(explanation)
#

!streamlit run app.py & npx localtunnel --port 8501